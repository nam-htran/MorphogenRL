#!/bin/bash

set -e

echo "==================================================="
echo "--- EXECUTING REMOTE PROVISIONING SCRIPT (Vast.ai - V11) ---"
echo "==================================================="

if [ -z "$MODEL_SET" ]; then echo "[ERROR] Env Var 'MODEL_SET' is not set!"; exit 1; fi
if [ -z "$NGROK_AUTHTOKEN" ]; then echo "[ERROR] Env Var 'NGROK_AUTHTOKEN' is not set!"; exit 1; fi
if [ -z "$UPSTASH_REDIS_URL" ]; then echo "[ERROR] Env Var 'UPSTASH_REDIS_URL' is not set!"; exit 1; fi

echo "[PROVISION] Model Set: '${MODEL_SET}'"
echo "[PROVISION] Low VRAM Mode: '${LOW_VRAM_MODE:-false}'"

export PROJECT_ROOT="/app/REST_API_GPU_V2R"
export HUNYUAN_ROOT="/app/Hunyuan3D-2"
export PRELOAD_SCRIPT_PATH="/tmp/download_models_runtime.py"

export PYTHONPATH="${PROJECT_ROOT}:${HUNYUAN_ROOT}:${PYTHONPATH}"
echo "[PROVISION] PYTHONPATH set to: ${PYTHONPATH}"

echo "[PROVISION] Generating temporary model pre-loader script..."
cat << EOF > "${PRELOAD_SCRIPT_PATH}"
# Auto-generated by provision.sh
import sys, os, argparse, traceback
# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ƒë·∫£m b·∫£o import ho·∫°t ƒë·ªông
sys.path.insert(0, "${PROJECT_ROOT}")
sys.path.insert(0, "${HUNYUAN_ROOT}")
from api.models import ModelManager
def main():
    parser = argparse.ArgumentParser(description="Hunyuan3D Model Pre-downloader")
    parser.add_argument("--model_set", type=str, required=True)
    parser.add_argument('--low_vram_mode', action='store_true')
    parser.add_argument('--device', type=str, default='cuda')
    parser.add_argument('--cache-path', type=str, default='api_cache')
    parser.add_argument('--enable_flashvdm', action='store_true')
    parser.add_argument('--mc_algo', type=str, default='mc')
    parser.add_argument('--compile', action='store_true')
    args = parser.parse_args()
    print(f"[Pre-loader] Initializing ModelManager for model set: '{args.model_set}'...")
    ModelManager(args)
    print("[Pre-loader] All models downloaded successfully!")
if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"[Pre-loader] FATAL ERROR during model download: {e}")
        traceback.print_exc()
        sys.exit(1)
EOF

echo "[PROVISION] Executing the pre-loader script (this may take a long time)..."
cd "${HUNYUAN_ROOT}"
echo "[PROVISION] CWD is now: $(pwd)"

LOW_VRAM_MODE_FLAG=""
if [[ "${LOW_VRAM_MODE}" == "true" ]]; then
    LOW_VRAM_MODE_FLAG="--low_vram_mode"
fi

python "${PRELOAD_SCRIPT_PATH}" --model_set "${MODEL_SET}" ${LOW_VRAM_MODE_FLAG} --cache-path "${PROJECT_ROOT}/api_cache"
rm "${PRELOAD_SCRIPT_PATH}"
echo "[PROVISION] Model provisioning complete."
echo "------------------------------------------"

LOG_FILE="/tmp/server_log.txt"
echo "[PROVISION] Starting API server in background..."

python -m api.main --port 8080 --ngrok_authtoken "${NGROK_AUTHTOKEN}" \
                   --model_set "${MODEL_SET}" ${LOW_VRAM_MODE_FLAG} \
                   --cache-path "${PROJECT_ROOT}/api_cache" > $LOG_FILE 2>&1 &
SERVER_PID=$!
echo "[PROVISION] Server started with PID: $SERVER_PID."

echo "[PROVISION] Waiting for Ngrok URL (timeout: 120s)..."
NGROK_URL=""
for i in {1..120}; do
    if ! ps -p $SERVER_PID > /dev/null; then tail -n 50 $LOG_FILE; echo "[ERROR] Server terminated unexpectedly!"; exit 1; fi
    if [ -f "$LOG_FILE" ]; then
        NGROK_URL=$(grep "PUBLIC URL" $LOG_FILE | sed 's/.*üåç PUBLIC URL (NGROK TUNNEL): //');
        if [ ! -z "$NGROK_URL" ]; then break; fi
    fi
    echo "Waiting... (${i}s)"; sleep 1;
done

if [ -z "$NGROK_URL" ]; then tail -n 50 $LOG_FILE; echo "[ERROR] Failed to get Ngrok URL!"; exit 1; fi
echo "[PROVISION] Captured Ngrok URL: $NGROK_URL"

echo "[PROVISION] Registering URL in Redis..."
cd "${PROJECT_ROOT}"; python -m api.register_url $NGROK_URL
echo "[PROVISION] URL registered."

echo "==================================================="
echo "--- PROVISIONING SCRIPT FINISHED SUCCESSFULLY ---"
echo "==================================================="
wait $SERVER_PID
