#!/bin/bash
set -e

echo "=========================================="
echo "--- Starting On-Start Script (V5 - Final & Robust) ---"
echo "=========================================="

echo "[OK] Environment is pre-configured by Docker image."

# --- Bi·∫øn M√¥i tr∆∞·ªùng ---
if [ -z "$NGROK_AUTHTOKEN" ]; then
    echo "[ERROR] NGROK_AUTHTOKEN is not set!"
    exit 1
fi
if [ -z "$UPSTASH_REDIS_URL" ]; then
    echo "[ERROR] UPSTASH_REDIS_URL is not set!"
    exit 1
fi

# --- C·∫•u h√¨nh Model v√† Ch·∫ø ƒë·ªô VRAM ---
export MODEL_SET="${MODEL_SET:-mini_turbo}"
export LOW_VRAM_MODE="${LOW_VRAM_MODE:-false}"

# --- THI·∫æT L·∫¨P ƒê∆Ø·ªúNG D·∫™N & M√îI TR∆Ø·ªúNG ---
export PROJECT_ROOT="/app/REST_API_GPU_V2R"
export HUNYUAN_ROOT="${PROJECT_ROOT}/Hunyuan3D-2"
export PRELOAD_SCRIPT_PATH="${PROJECT_ROOT}/api/download_models_runtime.py"

# Th√™m PROJECT_ROOT v√†o PYTHONPATH ƒë·ªÉ Python t√¨m th·∫•y module `api`
export PYTHONPATH="${PROJECT_ROOT}:${PYTHONPATH}"
echo "[SETUP] PYTHONPATH set to: ${PYTHONPATH}"
echo "------------------------------------------"


# --- B∆Ø·ªöC 1: T·∫†O SCRIPT T·∫¢I MODEL T·∫†M TH·ªúI ---
echo "--- Step 1: Generating a temporary model pre-loader script... ---"
# S·ª≠ d·ª•ng 'Here Document' (cat <<EOF) ƒë·ªÉ t·∫°o file Python m·ªôt c√°ch an to√†n
cat << EOF > "${PRELOAD_SCRIPT_PATH}"
# This is a temporary script generated by on-start.sh
import sys
import os
import argparse

# C·∫ßn th√™m d√≤ng n√†y ƒë·ªÉ ƒë·∫£m b·∫£o import ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh
sys.path.insert(0, "${PROJECT_ROOT}")

from api.models import ModelManager

def main():
    parser = argparse.ArgumentParser(description="Hunyuan3D Model Pre-downloader")
    parser.add_argument("--model_set", type=str, required=True)
    parser.add_argument('--low_vram_mode', action='store_true')
    parser.add_argument('--device', type=str, default='cuda')
    parser.add_argument('--cache-path', type=str, default='api_cache')
    parser.add_argument('--enable_flashvdm', action='store_true')
    parser.add_argument('--mc_algo', type=str, default='mc')
    parser.add_argument('--compile', action='store_true')
    args = parser.parse_args()

    print(f"[Pre-loader] Initializing ModelManager for model set: '{args.model_set}'...")
    try:
        ModelManager(args)
        print("[Pre-loader] All models downloaded successfully!")
    except Exception as e:
        print(f"[Pre-loader] FATAL ERROR during model download: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
EOF

echo "[OK] Pre-loader script created at: ${PRELOAD_SCRIPT_PATH}"
echo "------------------------------------------"


# --- B∆Ø·ªöC 2: T·∫¢I TR∆Ø·ªöC MODEL ---
echo "--- Step 2: Executing the pre-loader script... ---"
echo "--- This may take a long time, please be patient. ---"

# **FIX L·ªñI "failed to load template"**
# Thay ƒë·ªïi th∆∞ m·ª•c l√†m vi·ªác (CWD) sang th∆∞ m·ª•c g·ªëc c·ªßa th∆∞ vi·ªán Hunyuan3D-2
# ƒêi·ªÅu n√†y c·ª±c k·ª≥ quan tr·ªçng ƒë·ªÉ n√≥ c√≥ th·ªÉ t√¨m th·∫•y c√°c file assets c·ªßa n√≥ (v√≠ d·ª•: ./assets/...)
cd "${HUNYUAN_ROOT}"
echo "[SETUP] Current Working Directory changed to: $(pwd)"

# Chu·∫©n b·ªã c·ªù --low_vram_mode
LOW_VRAM_MODE_FLAG=""
if [[ "${LOW_VRAM_MODE}" == "true" ]]; then
    LOW_VRAM_MODE_FLAG="--low_vram_mode"
fi

# Ch·∫°y script v·ª´a t·∫°o. Script bash s·∫Ω ch·ªù cho ƒë·∫øn khi n√≥ ho√†n th√†nh.
python "${PRELOAD_SCRIPT_PATH}" --model_set "${MODEL_SET}" ${LOW_VRAM_MODE_FLAG}

echo "[OK] All models are now cached locally."
echo "------------------------------------------"


# --- B∆Ø·ªöC 3: KH·ªûI ƒê·ªòNG SERVER API ---
LOG_FILE="/tmp/server_log.txt"
echo "--- Step 3: Starting API server in background... Log file: $LOG_FILE ---"

# Ch·∫°y server ch√≠nh. CWD v·∫´n ƒëang l√† HUNYUAN_ROOT, v√† PYTHONPATH ƒë√£ ƒë∆∞·ª£c set.
# ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o server kh·ªüi ƒë·ªông v√† ho·∫°t ƒë·ªông ƒë√∫ng.
python -m api.main --port 8080 --ngrok_authtoken "${NGROK_AUTHTOKEN}" \
                   --model_set "${MODEL_SET}" ${LOW_VRAM_MODE_FLAG} \
                   --cache-path "${PROJECT_ROOT}/api_cache" > $LOG_FILE 2>&1 &

SERVER_PID=$!
echo "--- Server started with PID: $SERVER_PID ---"
echo "------------------------------------------"


# --- C√ÅC B∆Ø·ªöC C√íN L·∫†I (GI·ªÆ NGUY√äN) ---
echo "--- Step 4: Waiting for Ngrok URL... (timeout: 120s) ---"
NGROK_URL=""
for i in {1..120}; do
    if ! ps -p $SERVER_PID > /dev/null; then
        echo "[ERROR] Server process (PID: $SERVER_PID) terminated unexpectedly!"
        echo "--- Displaying last 50 lines of log: ---"
        tail -n 50 $LOG_FILE
        exit 1
    fi
    if [ -f "$LOG_FILE" ]; then
        NGROK_URL=$(grep "PUBLIC URL" $LOG_FILE | sed 's/.*üåç PUBLIC URL (NGROK TUNNEL): //')
        if [ ! -z "$NGROK_URL" ]; then break; fi
    fi
    echo "Waiting... (${i}s)"
    sleep 1
done

if [ -z "$NGROK_URL" ]; then
    echo "[ERROR] Failed to retrieve Ngrok URL within 120 seconds."
    echo "--- Displaying last 50 lines of log: ---"
    tail -n 50 $LOG_FILE
    exit 1
fi

echo "[OK] Captured Ngrok URL: $NGROK_URL"
echo "------------------------------------------"

echo "--- Step 5: Registering URL in Redis... ---"
# Quay v·ªÅ th∆∞ m·ª•c g·ªëc c·ªßa project ƒë·ªÉ ch·∫°y register_url cho ch·∫Øc ch·∫Øn
cd "${PROJECT_ROOT}"
python -m api.register_url $NGROK_URL
echo "[OK] URL registered in Redis."
echo "=========================================="
echo "--- On-Start Script finished. Server is running in background. ---"
echo "--- You can check the log with: tail -f $LOG_FILE ---"
echo "=========================================="

wait $SERVER_PID
